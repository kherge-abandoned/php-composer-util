<?php

namespace Herrera\Composer\Util;

use Composer\Autoload\ClassLoader;
use Herrera\Composer\Util\Exception\RuntimeException;
use Herrera\Json\Json;

/**
 * The Composer utility functions.
 *
 * @author Kevin Herrera <kevin@herrera.io>
 */
class Util
{
    /**
     * Returns the class loader generated by Composer.
     *
     * @param string $file The composer.json file path.
     *
     * @return ClassLoader The class loader.
     *
     * @throws Exception\Exception
     * @throws RuntimeException If the class loader could not be loaded.
     */
    public static function getClassLoader($file)
    {
        $json = new Json();
        $json = $json->decodeFile($file);
        $path = dirname($file);

        if (isset($json->config) && isset($json->config->{'vendor-dir'})) {
            $path .= DIRECTORY_SEPARATOR . $json->config->{'vendor-dir'};
        } else {
            $path .= DIRECTORY_SEPARATOR . 'vendor';
        }

        $path .= DIRECTORY_SEPARATOR . 'autoload.php';

        if (false === file_exists($path)) {
            throw RuntimeException::create(
                'The Composer class loader "%s" could not be found.',
                $path
            );
        }

        return include $path;
    }

    /**
     * Returns the path to composer.json.
     *
     * @param string  $dir  The starting directory path.
     * @param integer $skip The number of occurrences to skip.
     *
     * @return string The file path.
     *
     * @throws Exception\Exception
     * @throws RuntimeException If the path could not be found.
     */
    public static function getComposerPath($dir, $skip = 0)
    {
        $up = $dir;
        $skips = 0;

        do {
            $dir = $up;

            if (file_exists("$dir/composer.json")) {
                if ($skip > $skips) {
                    $skips++;

                    continue;
                }

                return realpath("$dir/composer.json");
            }
        } while ($dir !== ($up = dirname($dir)));

        throw new RuntimeException (
            'The composer.json file could not be found.'
        );
    }
}